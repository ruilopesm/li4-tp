@page "/"

@inject AuthenticationStateProvider AuthProvider
@inject IAuctionService _auctionService
@inject IUserService _userService
@inject IProductService _productService

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using OnlineAuctions.Shared

<PageTitle>Leilões</PageTitle>

@if (auctions == null)
{
    <p>Carregando...</p>
}
else
{
    var processedAuctions = ProcessAuctions();

    <div class="flex flex-row items-center space-x-6">
        <p class="text-4xl font-bold">Leilões</p>
        <div class="relative w-[700px]">
            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                </svg>
            </div>
            <input
                @bind-Value="searchQuery"
                @bind-Value:event="oninput"
                type="search" 
                class="block w-full p-3.5 ps-10 text-md text-gray-900 border border-gray-300 rounded-2xl" 
                placeholder="Pesquisar por produtos"
            >
        </div>
        <p class="text-md">
            A mostrar
            @if (processedAuctions.Count == 1)
            {
                <span>1 leilão</span>
            }
            else
            {
                <span>@processedAuctions.Count leilões</span>
            }
        </p>
    </div>

    <div class="flex flex-row space-x-4 mt-3">
        <div class="relative inline-block text-left">
            <div>
                <button 
                    @onclick="ToggleSortingDropdown"
                    class="text-sm border px-4 py-0.5 rounded-full flex items-center bg-pcs-lightest-gray"
                >
                    Ordenar por <p class="pl-1 text-pcs-gray">@GetSortingOptionText()</p>
                    <svg class="-mr-1 -mb-0.5 h-5 w-5 text-pcs-medium-gray" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>

            @if (isSortingDropdownOpen)
            {
                <div class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <a 
                        @onclick="() => UpdateSortingOption(SortingOption.HighestPrice)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Preço mais alto
                    </a>
                    <a 
                        @onclick="() => UpdateSortingOption(SortingOption.LowestPrice)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Preço mais baixo
                    </a>
                    <a 
                        @onclick="() => UpdateSortingOption(SortingOption.MostRecent)"
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Mais recentes
                    </a>
                </div>
            }
        </div>
        <div class="relative inline-block text-left">
            <div>
                <button 
                    @onclick="ToggleFilteringDropdown" 
                    class="text-sm border px-4 py-0.5 rounded-full flex items-center bg-pcs-lightest-gray"
                >
                    A filtrar por <p class="pl-1 text-pcs-gray">@GetFilteringOptionText()</p>
                    <svg class="-mr-1 -mb-0.5 h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>

            @if (isFilteringDropdownOpen)
            {
                <div class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <a 
                        @onclick="() => UpdateFilteringOption(FilteringOption.Open)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Aberto
                    </a>
                    <a 
                        @onclick="() => UpdateFilteringOption(FilteringOption.Closed)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Fechado
                    </a>
                    <a 
                        @onclick="() => UpdateFilteringOption(FilteringOption.Cancelled)"
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Cancelado
                    </a>
                    <a
                        @onclick="() => UpdateFilteringOption(null)"
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Nada
                    </a>
                </div>
            }
        </div>
    </div>

    @if (admin != null)
    {
        <button @onclick="() => modalDialog!.Open()" class="flex flex-row items-center mt-4 -mb-1 space-x-1">
            <svg class="h-6 w-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M4 12H20M12 4V20" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <p>Criar leilão</p>
        </button>

        <ModalDialog @ref="modalDialog" 
            Title="Criar leilão" 
            Type="ModalDialog.ActionType.Create" 
            SubmitCallback="() => CreateAuctionCallback()"
        >
            <EditForm EditContext="_newAuctionFormContext" class="space-y-3">
                <DataAnnotationsValidator />
                <div>
                    <label for="product" class="block text-md font-medium">Produto</label>
                    <InputSelect @bind-Value="_newAuctionModel.Product" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm">
                        <option value="" disabled selected hidden>Selecionar produto</option>
                        @foreach (var product in products)
                        {
                            <option value="@product.ID"> @product.Model.Name </option>
                        }
                    </InputSelect>
                </div>
                <div class="flex flex-row justify-between">
                    <div>
                        <label for="start" class="block text-md font-medium">Data começo</label>
                        <InputDate 
                            Type="InputDateType.DateTimeLocal" 
                            min="@DateTime.Today.ToString("yyyy-MM-dd")"
                            @bind-Value="_newAuctionModel.Start"
                            class="mt-0.5 border border-solid rounded-md w-full py-1.5 px-1 text-gray-700" 
                            placeholder="Data de Nascimento"
                        />
                    </div>
                    <div>
                        <label for="start" class="block text-md font-medium">Data fim (prevista)</label>
                        <InputDate 
                            Type="InputDateType.DateTimeLocal" 
                            min="@DateTime.Today.ToString("yyyy-MM-dd")"
                            @bind-Value="_newAuctionModel.End"
                            class="mt-0.5 border border-solid rounded-md w-full py-1.5 px-1 text-gray-700" 
                            placeholder="Data de Nascimento"
                        />
                    </div>
                </div>
                <div>
                    <label for="initialPrice" class="block text-md font-medium">Valor inicial</label>
                    <InputNumber @bind-Value="_newAuctionModel.InitialPrice" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" placeholder="470.30" />
                </div>
            </EditForm>
        </ModalDialog>
    }

    <ul class="flex flex-col my-6 space-y-6">
    @foreach (var auction in processedAuctions)
    {
        <li class="relative flex items-center justify-between px-6 py-5 bg-pcs-lightest-gray rounded-xl border">
            <div class="flex items-center gap-x-4 pr-6 w-1/2 flex-none">
                @if (auction.Product.Images.Count >= 1)
                {
                    <img class="object-scale-down h-24 w-24 flex-none" src="@auction.Product.Images[0]">
                }
                else
                {
                    <div class="h-24 w-24 flex-none rounded-full bg-gray-50 animate-pulse"></div>
                }
                <div class="min-w-0 flex-auto">
                    <div class="flex flex-row items-center">
                        <p class="text-3xl font-semibold leading-6 text-gray-900">
                            @auction.Product.Model.Name
                        </p>
                        <div class="border py-0.25 px-3 ml-4 rounded-xl text-xs bg-white">@auction.Product.Model.Color</div>
                        @if (@auction.Product.Model.Storage != null)
                        {
                            <div class="border py-0.25 px-3 ml-2 rounded-xl text-xs bg-white">@auction.Product.Model.Storage</div>
                        }
                    </div>
                    <p class="mt-1 flex items-center space-x-1 text-sm leading-5">
                        @* TODO: If the auction was cancelled, a cross should be displayed instead *@
                        @if (auction.End > DateTime.Now && auction.End - DateTime.Now < TimeSpan.FromHours(1))
                        {
                            <svg class="w-4 h-4" viewBox="0 0 48 48" fill="#c73030">
                                <path d="M 24 4 C 12.972066 4 4 12.972074 4 24 C 4 35.027926 12.972066 44 24 44 C 35.027934 44 44 35.027926 44 24 C 44 12.972074 35.027934 4 24 4 z M 24 7 C 33.406615 7 41 14.593391 41 24 C 41 33.406609 33.406615 41 24 41 C 14.593385 41 7 33.406609 7 24 C 7 14.593391 14.593385 7 24 7 z M 22.476562 11.978516 A 1.50015 1.50015 0 0 0 21 13.5 L 21 24.5 A 1.50015 1.50015 0 0 0 21.439453 25.560547 L 26.439453 30.560547 A 1.50015 1.50015 0 1 0 28.560547 28.439453 L 24 23.878906 L 24 13.5 A 1.50015 1.50015 0 0 0 22.476562 11.978516 z"></path>
                            </svg>
                            <p class="text-pcs-red">@ViewUtils.PrettyDisplayDateTime(auction.End)</p>
                        }
                        else
                        {
                            <svg class="w-4 h-4" viewBox="0 0 48 48" fillCurrentColor="currentColor">
                                <path d="M 24 4 C 12.972066 4 4 12.972074 4 24 C 4 35.027926 12.972066 44 24 44 C 35.027934 44 44 35.027926 44 24 C 44 12.972074 35.027934 4 24 4 z M 24 7 C 33.406615 7 41 14.593391 41 24 C 41 33.406609 33.406615 41 24 41 C 14.593385 41 7 33.406609 7 24 C 7 14.593391 14.593385 7 24 7 z M 22.476562 11.978516 A 1.50015 1.50015 0 0 0 21 13.5 L 21 24.5 A 1.50015 1.50015 0 0 0 21.439453 25.560547 L 26.439453 30.560547 A 1.50015 1.50015 0 1 0 28.560547 28.439453 L 24 23.878906 L 24 13.5 A 1.50015 1.50015 0 0 0 22.476562 11.978516 z"></path>
                            </svg>
                            <p>@ViewUtils.PrettyDisplayDateTime(auction.End)</p>
                        }
                    </p>
                </div>
            </div>
            <div class="flex items-center justify-between gap-x-4 w-1/2 flex-none">
                <ul class="block">
                    <li class="text-sm leading-6">@ProductModel.ConditionString(auction.Product.Condition)</li>
                    <li class="text-sm leading-5">@ProductModel.StateString(auction.Product.State)</li>
                </ul>
                <div class="absolute flex flex-col items-center ml-40">
                    @* Text color should gray when the auction has already ended or was cancelled *@
                    <p class="text-3xl font-bold text-pcs-green underline">@Math.Round(auction.CurrentPrice, 2)€</p>
                    @* FIXME: Bidder should come from the database *@
                    <p class="text-xs">De <span class="text-gray-700">João Mafioso</span></p>
                </div>
                <div class="flex flex-col ml-28 items-center space-y-1">
                    <NavLink
                        href="@($"/auction/{auction.ID}")"
                        class="bg-pcs-gray hover:bg-scs-gray rounded-lg text-white font-bold text-lg py-1 px-3">
                        Ver detalhes
                    </NavLink>
                    @* FIXME: Should have the real number of bids *@
                    <p class="text-sm">7 licitações</p>
                </div>
            </div>
        </li>
    }
    </ul>
}

@code {
    private List<AuctionModel> auctions;
    private AdminModel? admin;
    private List<ProductModel> products;

    protected override async Task OnInitializedAsync()
    {
        auctions = await _auctionService.GetAuctions();
        products = await _productService.GetProducts();
        
        var ourProvider = (AuthProvider)AuthProvider;
        string? email = await ourProvider.GetEmail();
        if (email != null)
        {
            admin = await _userService.GetAdmin(email);
        } 
    }

    private List<AuctionModel> ProcessAuctions()
    {
        var searchedAuctions = auctions!;

        if (searchQuery != "")
        {
            searchedAuctions = auctions!.Where(auction => auction.Product.Model.Name.ToLower().Contains(searchQuery.ToLower())).ToList();
        }

        var sortedAuctions = currentSortingOption switch
        {
            SortingOption.MostRecent => searchedAuctions.OrderByDescending(auction => auction.End),
            SortingOption.HighestPrice => searchedAuctions.OrderByDescending(auction => auction.CurrentPrice),
            SortingOption.LowestPrice => searchedAuctions.OrderBy(auction => auction.CurrentPrice),
            _ => throw new NotImplementedException(),
        };

        var filteredAuctions = currentFilteringOption switch
        {
            FilteringOption.Open => sortedAuctions.Where(auction => auction.End > DateTime.Now),
            FilteringOption.Closed => sortedAuctions.Where(auction => auction.End <= DateTime.Now),
            FilteringOption.Cancelled => sortedAuctions.Where(auction => auction.IsCancelled),
            null => sortedAuctions,
            _ => throw new NotImplementedException(),
        };

        return filteredAuctions.ToList();
    }

    // Searching
    private string searchQuery { get; set; }= ""; 

    // Sorting
    private bool isSortingDropdownOpen = false;
    private void ToggleSortingDropdown()
    {
        if (isFilteringDropdownOpen)
        {
            isFilteringDropdownOpen = false;
        }

        isSortingDropdownOpen = !isSortingDropdownOpen;
    }
    private void HideSortingDropdown() => isSortingDropdownOpen = false;

    private enum SortingOption
    {
        MostRecent,
        HighestPrice,
        LowestPrice
    }
    private SortingOption currentSortingOption = SortingOption.MostRecent;
    private string GetSortingOptionText()
    {
        return currentSortingOption switch
        {
            SortingOption.MostRecent => "Mais recentes",
            SortingOption.HighestPrice => "Preço mais alto",
            SortingOption.LowestPrice => "Preço mais baixo",
            _ => throw new NotImplementedException(),
        };
    }
    private void UpdateSortingOption(SortingOption option)
    {
        currentSortingOption = option;
        isSortingDropdownOpen = false;
    }

    // Filtering
    private bool isFilteringDropdownOpen = false;
    private void ToggleFilteringDropdown()
    {
        if (isSortingDropdownOpen)
        {
            isSortingDropdownOpen = false;
        }

        isFilteringDropdownOpen = !isFilteringDropdownOpen;
    }
    private void HideFilteringDropdown() => isFilteringDropdownOpen = false;
    
    private enum FilteringOption
    {
        Open,
        Closed,
        Cancelled
    }
    private FilteringOption? currentFilteringOption = null;
    private string GetFilteringOptionText()
    {
        if (currentFilteringOption == null)
        {
            return "Nada";
        }

        return currentFilteringOption switch
        {
            FilteringOption.Open => "Aberto",
            FilteringOption.Closed => "Fechado",
            FilteringOption.Cancelled => "Cancelado",
            _ => throw new NotImplementedException(),
        };
    }
    private void UpdateFilteringOption(FilteringOption? option)
    {
        if (option == currentFilteringOption)
        {
            currentFilteringOption = null;
        }
        else
        {
            currentFilteringOption = option;
        }

        isFilteringDropdownOpen = false;
    }
    
    // New auction
    private class NewAuctionModel
    {
        [Required(ErrorMessage = "O produto é obrigatório")]
        public int Product { get; set; }

        [Required(ErrorMessage = "A data de começo é obrigatória")]
        public DateTime Start { get; set; }

        [Required(ErrorMessage = "A data de fim é obrigatória")]
        public DateTime End { get; set; }
        
        [Required(ErrorMessage = "O preço inicial é obrigatório"), Range(0, double.MaxValue, ErrorMessage = "O preço inicial tem de ser positivo")]
        public decimal InitialPrice { get; set; }

        public NewAuctionModel()
        {
            Start = DateTime.Now;
            End = DateTime.Now + TimeSpan.FromDays(3);
        }
    }
    
    private ModalDialog? modalDialog;
    private EditContext? _newAuctionFormContext { get; set; }
    private ValidationMessageStore? _newAuctionValidationMessageStore { get; set; }
    private NewAuctionModel _newAuctionModel = new NewAuctionModel();
    private async void CreateAuctionCallback()
    {
        var auction = await _auctionService.CreateAuction(
            _newAuctionModel.Product,
            _newAuctionModel.Start,
            _newAuctionModel.End,
            _newAuctionModel.InitialPrice,
            admin!.InternalID
        );

        auctions.Add(auction);
    }

    // Initialize edit context
    protected override void OnInitialized()
    {
        _newAuctionFormContext = new EditContext(_newAuctionModel);
        _newAuctionValidationMessageStore = new ValidationMessageStore(_newAuctionFormContext);
    }
}
