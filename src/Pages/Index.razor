@page "/"

@inject AuthenticationStateProvider AuthProvider
@inject IAuctionService _auctionService
@inject IUserService _userService
@inject IProductService _productService
@inject IBidService _bidService

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using OnlineAuctions.Shared

<PageTitle>Leilões</PageTitle>

@if (auctions == null)
{
    <p>Carregando...</p>
}
else
{
    var processedAuctions = ProcessAuctions();

    <div class="flex flex-row items-center space-x-6">
        <p class="text-4xl font-bold">Leilões</p>
        <div class="relative w-[700px]">
            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                </svg>
            </div>
            <input
                @bind-Value="searchQuery"
                @bind-Value:event="oninput"
                type="search" 
                class="block w-full p-3.5 ps-10 text-md text-gray-900 border border-gray-300 rounded-2xl" 
                placeholder="Pesquisar por produtos"
            >
        </div>
        <p class="text-md">
            A mostrar
            @if (processedAuctions.Count == 1)
            {
                <span>1 leilão</span>
            }
            else
            {
                <span>@processedAuctions.Count leilões</span>
            }
        </p>
    </div>

    <div class="flex flex-row space-x-4 mt-3">
        <div class="relative inline-block text-left">
            <div>
                <button 
                    @onclick="ToggleSortingDropdown"
                    class="text-sm border px-4 py-0.5 rounded-full flex items-center bg-pcs-lightest-gray"
                >
                    Ordenar por <p class="pl-1 text-pcs-gray">@GetSortingOptionText()</p>
                    <svg class="-mr-1 -mb-0.5 h-5 w-5 text-pcs-medium-gray" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>

            @if (isSortingDropdownOpen)
            {
                <div class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <a 
                        @onclick="() => UpdateSortingOption(SortingOption.HighestPrice)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Preço mais alto
                    </a>
                    <a 
                        @onclick="() => UpdateSortingOption(SortingOption.LowestPrice)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Preço mais baixo
                    </a>
                    <a 
                        @onclick="() => UpdateSortingOption(SortingOption.MostRecent)"
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Mais recentes
                    </a>
                </div>
            }
        </div>
        <div class="relative inline-block text-left">
            <div>
                <button 
                    @onclick="ToggleFilteringDropdown" 
                    class="text-sm border px-4 py-0.5 rounded-full flex items-center bg-pcs-lightest-gray"
                >
                    A filtrar por <p class="pl-1 text-pcs-gray">@GetFilteringOptionText()</p>
                    <svg class="-mr-1 -mb-0.5 h-5 w-5 text-gray-600" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>

            @if (isFilteringDropdownOpen)
            {
                <div class="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <a 
                        @onclick="() => UpdateFilteringOption(FilteringOption.Open)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Aberto
                    </a>
                    <a 
                        @onclick="() => UpdateFilteringOption(FilteringOption.Closed)" 
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Fechado
                    </a>
                    <a 
                        @onclick="() => UpdateFilteringOption(FilteringOption.Cancelled)"
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Cancelado
                    </a>
                    <a
                        @onclick="() => UpdateFilteringOption(null)"
                        class="text-gray-700 hover:bg-gray-100 cursor-pointer block px-4 py-2 text-sm"
                    >
                        Nada
                    </a>
                </div>
            }
        </div>
    </div>

    @if (admin != null)
    {
        <button @onclick="() => modalDialog!.Open()" class="flex flex-row items-center mt-4 -mb-1 space-x-1">
            <svg class="h-6 w-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M4 12H20M12 4V20" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <p>Criar leilão</p>
        </button>

        <ModalDialog @ref="modalDialog" 
            Title="Criar leilão" 
            Type="ModalDialog.ActionType.Create" 
            SubmitCallback="() => CreateAuctionCallback()"
        >
            <EditForm EditContext="_newAuctionFormContext" class="space-y-3">
                <DataAnnotationsValidator />
                <div>
                    <label for="product" class="block text-md font-medium">Produto</label>
                    <InputSelect @bind-Value="_newAuctionModel.Product" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm">
                        <option value="" disabled selected hidden>Selecionar produto</option>
                        @foreach (var product in products)
                        {
                            <option value="@product.ID"> @product.Model.Name </option>
                        }
                    </InputSelect>
                </div>
                <div class="flex flex-row justify-between">
                    <div>
                        <label for="start" class="block text-md font-medium">Data começo</label>
                        <InputDate 
                            Type="InputDateType.DateTimeLocal" 
                            min="@DateTime.Today.ToString("yyyy-MM-dd")"
                            @bind-Value="_newAuctionModel.Start"
                            class="mt-0.5 border border-solid rounded-md w-full py-1.5 px-1 text-gray-700" 
                            placeholder="Data de Nascimento"
                        />
                    </div>
                    <div>
                        <label for="start" class="block text-md font-medium">Data fim (prevista)</label>
                        <InputDate 
                            Type="InputDateType.DateTimeLocal" 
                            min="@DateTime.Today.ToString("yyyy-MM-dd")"
                            @bind-Value="_newAuctionModel.End"
                            class="mt-0.5 border border-solid rounded-md w-full py-1.5 px-1 text-gray-700" 
                            placeholder="Data de Nascimento"
                        />
                    </div>
                </div>
                <div>
                    <label for="initialPrice" class="block text-md font-medium">Valor inicial</label>
                    <InputNumber @bind-Value="_newAuctionModel.InitialPrice" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" placeholder="470.30" />
                </div>
            </EditForm>
        </ModalDialog>
    }

    <ul class="flex flex-col my-6 space-y-6">
    @foreach (var (auction, lastBid, totalBids) in processedAuctions)
    {
        <li class="relative flex items-center justify-between px-6 py-5 bg-pcs-lightest-gray rounded-xl border">
            <div class="flex items-center gap-x-4 pr-6 w-1/2 flex-none">
                @if (auction.Product.Images.Count >= 1)
                {
                    <img class="object-scale-down h-24 w-24 flex-none" src="@auction.Product.Images[0]">
                }
                else
                {
                    <div class="h-24 w-24 flex-none rounded-full bg-gray-50 animate-pulse"></div>
                }
                <div class="min-w-0 flex-auto">
                    <div class="flex flex-row items-center">
                        <p class="text-3xl font-semibold leading-6 text-gray-900">
                            @auction.Product.Model.Name
                        </p>
                        <div class="border py-0.25 px-3 ml-4 rounded-xl text-xs bg-white">@auction.Product.Model.Color</div>
                        @if (@auction.Product.Model.Storage != null)
                        {
                            <div class="border py-0.25 px-3 ml-2 rounded-xl text-xs bg-white">@auction.Product.Model.Storage</div>
                        }
                    </div>
                    <p class="mt-1 flex items-center space-x-1 text-sm leading-5">
                        @if (!auction.IsCancelled && auction.End > DateTime.Now && auction.End - DateTime.Now < TimeSpan.FromHours(1))
                        {
                            <svg class="w-4 h-4" viewBox="0 0 48 48" fill="#c73030">
                                <path d="M 24 4 C 12.972066 4 4 12.972074 4 24 C 4 35.027926 12.972066 44 24 44 C 35.027934 44 44 35.027926 44 24 C 44 12.972074 35.027934 4 24 4 z M 24 7 C 33.406615 7 41 14.593391 41 24 C 41 33.406609 33.406615 41 24 41 C 14.593385 41 7 33.406609 7 24 C 7 14.593391 14.593385 7 24 7 z M 22.476562 11.978516 A 1.50015 1.50015 0 0 0 21 13.5 L 21 24.5 A 1.50015 1.50015 0 0 0 21.439453 25.560547 L 26.439453 30.560547 A 1.50015 1.50015 0 1 0 28.560547 28.439453 L 24 23.878906 L 24 13.5 A 1.50015 1.50015 0 0 0 22.476562 11.978516 z"></path>
                            </svg>
                            <p class="text-pcs-red">@ViewUtils.PrettyDisplayDateTime(auction.End)</p>
                        }
                        else
                        {
                            @if (auction.IsCancelled)
                            {
                                <svg class="h-6 w-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M13.06 12L17.48 7.57996C17.5537 7.5113 17.6128 7.4285 17.6538 7.3365C17.6948 7.2445 17.7168 7.14518 17.7186 7.04448C17.7204 6.94378 17.7018 6.84375 17.6641 6.75036C17.6264 6.65697 17.5703 6.57214 17.499 6.50092C17.4278 6.4297 17.343 6.37356 17.2496 6.33584C17.1562 6.29811 17.0562 6.27959 16.9555 6.28137C16.8548 6.28314 16.7555 6.30519 16.6635 6.34618C16.5715 6.38717 16.4887 6.44627 16.42 6.51996L12 10.94L7.58 6.51996C7.43782 6.38748 7.24978 6.31535 7.05548 6.31878C6.86118 6.32221 6.67579 6.40092 6.53838 6.53834C6.40096 6.67575 6.32225 6.86113 6.31882 7.05544C6.3154 7.24974 6.38752 7.43778 6.52 7.57996L10.94 12L6.52 16.42C6.37955 16.5606 6.30066 16.7512 6.30066 16.95C6.30066 17.1487 6.37955 17.3393 6.52 17.48C6.66062 17.6204 6.85125 17.6993 7.05 17.6993C7.24875 17.6993 7.43937 17.6204 7.58 17.48L12 13.06L16.42 17.48C16.5606 17.6204 16.7512 17.6993 16.95 17.6993C17.1488 17.6993 17.3394 17.6204 17.48 17.48C17.6204 17.3393 17.6993 17.1487 17.6993 16.95C17.6993 16.7512 17.6204 16.5606 17.48 16.42L13.06 12Z" fill="#bbbbbb"/>
                                </svg>  
                                <p class="text-pcs-light-gray">Cancelado</p>
                            }
                            else
                            {
                                <svg class="w-4 h-4" viewBox="0 0 48 48" fillCurrentColor="currentColor">
                                    <path d="M 24 4 C 12.972066 4 4 12.972074 4 24 C 4 35.027926 12.972066 44 24 44 C 35.027934 44 44 35.027926 44 24 C 44 12.972074 35.027934 4 24 4 z M 24 7 C 33.406615 7 41 14.593391 41 24 C 41 33.406609 33.406615 41 24 41 C 14.593385 41 7 33.406609 7 24 C 7 14.593391 14.593385 7 24 7 z M 22.476562 11.978516 A 1.50015 1.50015 0 0 0 21 13.5 L 21 24.5 A 1.50015 1.50015 0 0 0 21.439453 25.560547 L 26.439453 30.560547 A 1.50015 1.50015 0 1 0 28.560547 28.439453 L 24 23.878906 L 24 13.5 A 1.50015 1.50015 0 0 0 22.476562 11.978516 z"></path>
                                </svg>
                                <p>@ViewUtils.PrettyDisplayDateTime(auction.End)</p>
                            }
                        }
                    </p>
                </div>
            </div>
            <div class="flex items-center justify-between gap-x-4 w-1/2 flex-none">
                <ul class="block">
                    <li class="text-sm leading-6">@ProductModel.ConditionString(auction.Product.Condition)</li>
                    <li class="text-sm leading-5">@ProductModel.StateString(auction.Product.State)</li>
                </ul>
                <div class="absolute flex flex-col items-center ml-40">
                    @* Text color should gray when the auction has already ended or was cancelled *@
                    <p class="text-3xl font-bold text-pcs-green underline">@Math.Round(auction.CurrentPrice, 2)€</p>

                    @if (lastBid != null && lastBid.Bidder != null)
                    {
                        <p class="text-xs">De <span class="text-gray-700">@lastBid.Bidder.Name</span></p>
                    }
                    else
                    {
                        <p class="text-xs text-gray-700">Sem licitações</p>
                    }
                </div>
                <div class="flex flex-col ml-28 items-center space-y-1">
                    <NavLink
                        href="@($"/auction/{auction.ID}")"
                        class="bg-pcs-gray hover:bg-scs-gray rounded-lg text-white font-bold text-lg py-1 px-3">
                        Ver detalhes
                    </NavLink>
                    <p class="text-sm">@totalBids licitações</p>
                </div>
            </div>
        </li>
    }
    </ul>
}

@code {
    private List<(AuctionModel, BidModel?, int)> auctions;
    private AdminModel? admin;
    private List<ProductModel> products;

    protected override async Task OnInitializedAsync()
    {
        var onlyAuctions = await _auctionService.GetAuctions();
        auctions = new List<(AuctionModel, BidModel?, int)>();

        foreach (var auction in onlyAuctions)
        {
            var lastBid = await _bidService.GetAuctionLastBid(auction.ID);
            var totalBids = await _bidService.GetTotalBids(auction.ID);
            auctions.Add((auction, lastBid, totalBids));
        }

        products = await _productService.GetProducts();
        
        var ourProvider = (AuthProvider)AuthProvider;
        string? email = await ourProvider.GetEmail();
        if (email != null)
        {
            admin = await _userService.GetAdmin(email);
        }

        await Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(1000);
                await InvokeAsync(StateHasChanged);
            }
        }); 
    }

    private List<(AuctionModel, BidModel?, int)> ProcessAuctions()
    {
        var searchedAuctions = auctions!;

        if (searchQuery != "")
        {
            searchedAuctions = auctions!.Where(auction => auction.Item1.Product.Model.Name.ToLower().Contains(searchQuery.ToLower())).ToList();
        }

        var sortedAuctions = currentSortingOption switch
        {
            SortingOption.MostRecent => searchedAuctions.OrderByDescending(auction => auction.Item1.End),
            SortingOption.HighestPrice => searchedAuctions.OrderByDescending(auction => auction.Item1.CurrentPrice),
            SortingOption.LowestPrice => searchedAuctions.OrderBy(auction => auction.Item1.CurrentPrice),
            _ => throw new NotImplementedException(),
        };

        var filteredAuctions = currentFilteringOption switch
        {
            FilteringOption.Open => sortedAuctions.Where(auction => auction.Item1.End > DateTime.Now),
            FilteringOption.Closed => sortedAuctions.Where(auction => auction.Item1.End <= DateTime.Now),
            FilteringOption.Cancelled => sortedAuctions.Where(auction => auction.Item1.IsCancelled),
            null => sortedAuctions,
            _ => throw new NotImplementedException(),
        };

        return filteredAuctions.ToList();
    }

    // Searching
    private string searchQuery { get; set; } = ""; 

    // Sorting
    private bool isSortingDropdownOpen = false;
    private void ToggleSortingDropdown()
    {
        if (isFilteringDropdownOpen)
        {
            isFilteringDropdownOpen = false;
        }

        isSortingDropdownOpen = !isSortingDropdownOpen;
    }
    private void HideSortingDropdown() => isSortingDropdownOpen = false;

    private enum SortingOption
    {
        MostRecent,
        HighestPrice,
        LowestPrice
    }
    private SortingOption currentSortingOption = SortingOption.MostRecent;
    private string GetSortingOptionText()
    {
        return currentSortingOption switch
        {
            SortingOption.MostRecent => "Mais recentes",
            SortingOption.HighestPrice => "Preço mais alto",
            SortingOption.LowestPrice => "Preço mais baixo",
            _ => throw new NotImplementedException(),
        };
    }
    private void UpdateSortingOption(SortingOption option)
    {
        currentSortingOption = option;
        isSortingDropdownOpen = false;
    }

    // Filtering
    private bool isFilteringDropdownOpen = false;
    private void ToggleFilteringDropdown()
    {
        if (isSortingDropdownOpen)
        {
            isSortingDropdownOpen = false;
        }

        isFilteringDropdownOpen = !isFilteringDropdownOpen;
    }
    private void HideFilteringDropdown() => isFilteringDropdownOpen = false;
    
    private enum FilteringOption
    {
        Open,
        Closed,
        Cancelled
    }
    private FilteringOption? currentFilteringOption = null;
    private string GetFilteringOptionText()
    {
        if (currentFilteringOption == null)
        {
            return "Nada";
        }

        return currentFilteringOption switch
        {
            FilteringOption.Open => "Aberto",
            FilteringOption.Closed => "Fechado",
            FilteringOption.Cancelled => "Cancelado",
            _ => throw new NotImplementedException(),
        };
    }
    private void UpdateFilteringOption(FilteringOption? option)
    {
        if (option == currentFilteringOption)
        {
            currentFilteringOption = null;
        }
        else
        {
            currentFilteringOption = option;
        }

        isFilteringDropdownOpen = false;
    }
    
    // New auction
    private class NewAuctionModel
    {
        [Required(ErrorMessage = "O produto é obrigatório")]
        public int Product { get; set; }

        [Required(ErrorMessage = "A data de começo é obrigatória")]
        public DateTime Start { get; set; }

        [Required(ErrorMessage = "A data de fim é obrigatória")]
        public DateTime End { get; set; }
        
        [Required(ErrorMessage = "O preço inicial é obrigatório"), Range(0, double.MaxValue, ErrorMessage = "O preço inicial tem de ser positivo")]
        public decimal InitialPrice { get; set; }

        public NewAuctionModel()
        {
            Start = DateTime.Now;
            End = DateTime.Now + TimeSpan.FromDays(3);
        }
    }
    
    private ModalDialog? modalDialog;
    private EditContext? _newAuctionFormContext { get; set; }
    private ValidationMessageStore? _newAuctionValidationMessageStore { get; set; }
    private NewAuctionModel _newAuctionModel = new NewAuctionModel();
    private async void CreateAuctionCallback()
    {
        var auction = await _auctionService.CreateAuction(
            _newAuctionModel.Product,
            _newAuctionModel.Start,
            _newAuctionModel.End,
            _newAuctionModel.InitialPrice,
            admin!.InternalID
        );

        auctions.Add((auction, null, 0));
    }

    // Initialize edit context
    protected override void OnInitialized()
    {
        _newAuctionFormContext = new EditContext(_newAuctionModel);
        _newAuctionValidationMessageStore = new ValidationMessageStore(_newAuctionFormContext);
    }
}
