@page "/register"
@layout NoLayout

@inject IUserService _db
@inject IJSRuntime js
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager 

@using BCrypt.Net
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<div class="flex flex-col justify-center items-center h-screen">
    <div class="flex items-center mb-6">
      <img class="h-28 w-auto" src="assets/logo.png" alt="Maçã">
      <p id="company-title" class="text-6xl">Maçã</p>
    </div>
    <div class="w-full max-w-[430px]">
        <div class="bg-[#f5f5f5] rounded-md px-8 pt-6 pb-8 mb-4">
            <div>
                <p class="text-4xl font-extrabold text-center mb-4">Registar</p>
            </div>
            <EditForm EditContext="_registerFormContext" OnValidSubmit="() => Authenticate()">
                <DataAnnotationsValidator />
                <div class="mb-2 text-xs space-y-1">
                    <InputText @bind-Value="_registerModel.Name" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700" placeholder="Nome"/>
                    <div class="pl-3 text-pcs-red">
                        <ValidationMessage For="() => _registerModel.Name" />
                    </div>
                </div>
                <div class="mb-2 text-xs space-y-1">
                    <InputText @bind-Value="_registerModel.Email" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700" type="email" placeholder="Email"/>
                    <div class="pl-3 text-pcs-red">
                        <ValidationMessage For="() => _registerModel.Email" />
                    </div>
                </div>
                <div class="mb-2 text-xs space-y-1">
                    <div class="relative">
                        <InputText @bind-Value="_registerModel.Password" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700" type="@inputType" placeholder="Password" />
                        @if (!showPassword)
                        {
                            <svg @onclick="TogglePasswordVisibility" class="h-4 w-4 absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M2.99902 3L20.999 21M9.8433 9.91364C9.32066 10.4536 8.99902 11.1892 8.99902 12C8.99902 13.6569 10.3422 15 11.999 15C12.8215 15 13.5667 14.669 14.1086 14.133M6.49902 6.64715C4.59972 7.90034 3.15305 9.78394 2.45703 12C3.73128 16.0571 7.52159 19 11.9992 19C13.9881 19 15.8414 18.4194 17.3988 17.4184M10.999 5.04939C11.328 5.01673 11.6617 5 11.9992 5C16.4769 5 20.2672 7.94291 21.5414 12C21.2607 12.894 20.8577 13.7338 20.3522 14.5" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        }
                        else
                        {
                            <svg @onclick="TogglePasswordVisibility" class="h-4 w-4 absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M15.0007 12C15.0007 13.6569 13.6576 15 12.0007 15C10.3439 15 9.00073 13.6569 9.00073 12C9.00073 10.3431 10.3439 9 12.0007 9C13.6576 9 15.0007 10.3431 15.0007 12Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M12.0012 5C7.52354 5 3.73326 7.94288 2.45898 12C3.73324 16.0571 7.52354 19 12.0012 19C16.4788 19 20.2691 16.0571 21.5434 12C20.2691 7.94291 16.4788 5 12.0012 5Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        }
                    </div>
                    <div class="pl-3 text-pcs-red">
                        <ValidationMessage For="() => _registerModel.Password" />
                    </div>
                </div>
                <div class="mb-2 text-xs space-y-1">
                    <InputNumber @bind-Value="_registerModel.NIF" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700" type="text" placeholder="NIF"/>
                    <div class="pl-3 text-pcs-red">
                        <ValidationMessage For="() => _registerModel.NIF" />
                    </div>
                </div>
                <div class="mb-2 text-xs space-y-1">
                    <InputDate @bind-Value="_registerModel.BirthDate" class="border border-solid rounded-xl w-full py-3 px-3 text-gray-700" placeholder="Data de Nascimento"/>
                    <div class="pl-3 text-pcs-red">
                        <ValidationMessage For="() => _registerModel.BirthDate" />
                    </div>
                </div>
                <div class="flex flex-col space-y-2 items-center justify-center">
                    <button class="bg-pcs-black hover:bg-scs-gray text-white font-bold py-2.5 px-10 rounded-md focus:outline-none focus:shadow-outline" type="submit">
                        <p class="font-extrabold">Confirmar</p>
                    </button>
                    <div class="text-xs">
                        <p>Já tem conta? <a href="/login" class="text-pcs-blue hover:text-scs-blue underline">Entre na Maçã</a></p>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private class RegisterModel
    {
        [Required(ErrorMessage = "O campo nome é obrigatório")]
        public string Name { get; set; }
        [Required(ErrorMessage = "O campo email é obrigatório"), EmailAddress(ErrorMessage = "O email tem que seguir o formato user@dominio.com")]
        public string Email { get; set; }
        [Required(ErrorMessage = "O campo password é obrigatório"), MinLength(8, ErrorMessage = "A password deve ter no mínimo 8 caracteres")]
        public string Password { get; set; }
        [Required(ErrorMessage = "O campo NIF é obrigatório"), NIF(ErrorMessage = "NIF inválido")]
        public int NIF { get; set; }
        [Required(ErrorMessage = "O campo data de nascimento é obrigatório"), MinimumAge(18, ErrorMessage = "Deve ter no mínimo 18 anos para se registar")]
        public DateOnly BirthDate { get; set; }

        public RegisterModel()
        {
            Name = "";
            Email = "";
            Password = "";
            NIF = 0;
            BirthDate = DateOnly.FromDateTime(DateTime.Now);
        }
    }

    private bool showPassword = false;
    private string inputType => showPassword ? "text" : "password";
    private void TogglePasswordVisibility() => showPassword = !showPassword;

    private EditContext? _registerFormContext { get; set; }
    private ValidationMessageStore? _registerFormValidationMessageStore { get; set; }

    private RegisterModel _registerModel = new RegisterModel();

    protected override void OnInitialized() {
        _registerFormContext = new EditContext(_registerModel);
        _registerFormValidationMessageStore = new ValidationMessageStore(_registerFormContext);
    }

    private async Task Authenticate()
    {
        string passwordHash = BCrypt.HashPassword(_registerModel.Password);
        await _db.CreateBidder(_registerModel.Name, _registerModel.Email, passwordHash, _registerModel.NIF, _registerModel.BirthDate);
        await js.InvokeVoidAsync("alert", "Conta criada com sucesso!");
        NavManager.NavigateTo("/login", true);
    }
}
