@page "/administrators"
@using BCrypt.Net

@inject AuthenticationStateProvider AuthProvider
@inject IUserService _UserService
@inject IAuctionService _AuctionService

<PageTitle>Gerenciar</PageTitle>

@if (admins == null)
{
    <p>Carregando...</p>
}
else
{
    <p class="text-4xl font-bold">Gerenciar administradores</p>

    <button @onclick="() => newAdminModalDialog!.Open()" class="flex flex-row items-center mt-4 -mb-1 space-x-1">
        <svg class="h-6 w-6" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M4 12H20M12 4V20" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
        <p>Criar nova conta de administrador</p>
    </button>

    <ModalDialog @ref="newAdminModalDialog" Title="Criar administrador" Type="ModalDialog.ActionType.Create" SubmitCallback="() => CreateAdminCallback()">
        <EditForm EditContext="_newAdminFormContext" class="space-y-3">
            <DataAnnotationsValidator />
            <div>
                <label for="name" class="block text-md font-medium">Nome</label>
                <InputText @bind-Value="_newAdminModel.Name" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" placeholder="Escreva o nome do administrador" />
            </div>
            <div>
                <label for="email" class="block text-md font-medium">Email</label>
                <InputText @bind-Value="_newAdminModel.Email" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" placeholder="Escreva o email do administrador" />
            </div>
            <div>
                <label for="password" class="block text-md font-medium">Password</label>
                <div class="relative">
                    <InputText @bind-Value="_newAdminModel.Password" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" type="@inputTypeNew" placeholder="Escreva a password do administrador" />
                    @if (!showPasswordNew)
                        {
                            <svg @onclick="TogglePasswordVisibilityNew" class="h-4 w-4 absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M2.99902 3L20.999 21M9.8433 9.91364C9.32066 10.4536 8.99902 11.1892 8.99902 12C8.99902 13.6569 10.3422 15 11.999 15C12.8215 15 13.5667 14.669 14.1086 14.133M6.49902 6.64715C4.59972 7.90034 3.15305 9.78394 2.45703 12C3.73128 16.0571 7.52159 19 11.9992 19C13.9881 19 15.8414 18.4194 17.3988 17.4184M10.999 5.04939C11.328 5.01673 11.6617 5 11.9992 5C16.4769 5 20.2672 7.94291 21.5414 12C21.2607 12.894 20.8577 13.7338 20.3522 14.5" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        }
                    else
                    {
                        <svg @onclick="TogglePasswordVisibilityNew" class="h-4 w-4 absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M15.0007 12C15.0007 13.6569 13.6576 15 12.0007 15C10.3439 15 9.00073 13.6569 9.00073 12C9.00073 10.3431 10.3439 9 12.0007 9C13.6576 9 15.0007 10.3431 15.0007 12Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M12.0012 5C7.52354 5 3.73326 7.94288 2.45898 12C3.73324 16.0571 7.52354 19 12.0012 19C16.4788 19 20.2691 16.0571 21.5434 12C20.2691 7.94291 16.4788 5 12.0012 5Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    }
                </div>
            </div>
        </EditForm>
    </ModalDialog>

    <div class="mt-6 mb-4 flow-root">
        <div class="-mx-4 -my-2 overflow-x-auto -mx-8">
            <div class="inline-block min-w-full py-2 align-middle px-8">
                <div class="overflow-hidden ring-1 ring-black ring-opacity-5 rounded-lg">
                    <table class="min-w-full divide-y divide-gray-300">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 pl-6">ID</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Nome</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Email</th>
                                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Ações</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 bg-white">
                            @foreach (var admin in admins)
                            {
                                <tr>
                                    <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium pl-6">@admin.InternalID.</td>
                                    <td class="whitespace-nowrap px-3 py-4 text-sm">@admin.Name</td>
                                    <td class="whitespace-nowrap px-3 py-4 text-sm">@admin.Email</td>
                                    <td class="flex flex-row whitespace-nowrap px-3 py-4 text-sm space-x-4">
                                        <button @onclick="() => { OpenEditModal(admin); }" class="flex flex-row items-center space-x-1">
                                            <svg class="h-5 w-5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <title/>
                                                <g id="Complete">
                                                <g id="edit">
                                                <g>
                                                <path d="M20,16v4a2,2,0,0,1-2,2H4a2,2,0,0,1-2-2V6A2,2,0,0,1,4,4H8" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                                                <polygon fill="none" points="12.5 15.8 22 6.2 17.8 2 8.3 11.5 8 16 12.5 15.8" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                                                </g>
                                                </g>
                                                </g>
                                            </svg>
                                            <p>Editar</p>
                                        </button>

                                        <ModalDialog @ref="_editAdminModalDialog" Title="Editar administrador" Type="ModalDialog.ActionType.Update" SubmitCallback="() => EditAdminCallback()">
                                            <EditForm EditContext="_editAdminFormContext" class="space-y-3">
                                                <DataAnnotationsValidator />
                                                <div>
                                                    <label for="name" class="block text-md font-medium">Nome</label>
                                                    <InputText @bind-Value="_editAdminModel.Name" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" placeholder="Escreva o nome do administrador" />
                                                </div>
                                                <div>
                                                    <label for="email" class="block text-md font-medium">Email</label>
                                                    <InputText @bind-Value="_editAdminModel.Email" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" placeholder="Escreva o email do administrador" />
                                                </div>
                                                <div>
                                                    <label for="password" class="block text-md font-medium">Password</label>
                                                    <div class="relative">
                                                        <InputText @bind-Value="_editAdminModel.Password" class="mt-0.5 block w-full rounded-md border-0 py-2.5 pl-3 pr-10 bg-white ring-1 ring-inset ring-gray-300 text-sm" type="@inputTypeEdit" placeholder="Escreva uma nova password caso queira alterar" />
                                                        @if (!showPasswordEdit)
                                                        {
                                                            <svg @onclick="TogglePasswordVisibilityEdit" class="h-4 w-4 absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                <path d="M2.99902 3L20.999 21M9.8433 9.91364C9.32066 10.4536 8.99902 11.1892 8.99902 12C8.99902 13.6569 10.3422 15 11.999 15C12.8215 15 13.5667 14.669 14.1086 14.133M6.49902 6.64715C4.59972 7.90034 3.15305 9.78394 2.45703 12C3.73128 16.0571 7.52159 19 11.9992 19C13.9881 19 15.8414 18.4194 17.3988 17.4184M10.999 5.04939C11.328 5.01673 11.6617 5 11.9992 5C16.4769 5 20.2672 7.94291 21.5414 12C21.2607 12.894 20.8577 13.7338 20.3522 14.5" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                            </svg>
                                                        }
                                                        else
                                                        {
                                                            <svg @onclick="TogglePasswordVisibilityEdit" class="h-4 w-4 absolute right-3 top-1/2 -translate-y-1/2 cursor-pointer" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                <path d="M15.0007 12C15.0007 13.6569 13.6576 15 12.0007 15C10.3439 15 9.00073 13.6569 9.00073 12C9.00073 10.3431 10.3439 9 12.0007 9C13.6576 9 15.0007 10.3431 15.0007 12Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                                <path d="M12.0012 5C7.52354 5 3.73326 7.94288 2.45898 12C3.73324 16.0571 7.52354 19 12.0012 19C16.4788 19 20.2691 16.0571 21.5434 12C20.2691 7.94291 16.4788 5 12.0012 5Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                            </svg>
                                                        }
                                                    </div>
                                                </div>
                                            </EditForm>
                                        </ModalDialog>

                                        @if (!adminsHasCreatedAuction[admin.InternalID] && !admin.IsMaster)
                                        {
                                            <button @onclick="() => { adminToRemove = admin; removeAdminModalDialog!.Open(); }" class="flex flex-row items-center space-x-1 text-pcs-red">
                                                <svg class="h-5 w-5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M4 6H20L18.4199 20.2209C18.3074 21.2337 17.4512 22 16.4321 22H7.56786C6.54876 22 5.69264 21.2337 5.5801 20.2209L4 6Z" stroke="#c73030" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                    <path d="M7.34491 3.14716C7.67506 2.44685 8.37973 2 9.15396 2H14.846C15.6203 2 16.3249 2.44685 16.6551 3.14716L18 6H6L7.34491 3.14716Z" stroke="#c73030" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                    <path d="M2 6H22" stroke="#c73030" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                    <path d="M10 11V16" stroke="#c73030" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                    <path d="M14 11V16" stroke="#c73030" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                                </svg>
                                                <p>Remover</p>
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <ModalDialog @ref="removeAdminModalDialog"
                                 Title="Remover administrador"
                                 SubmitCallback="() => RemoveAdminCallback()"
                                 Type="ModalDialog.ActionType.Delete">
                        <p class="text-lg">Tem a certeza que quer remover o administrador? O processo não é reversível.</p>
                    </ModalDialog>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AdminModel> admins;
    private Dictionary<int, bool> adminsHasCreatedAuction = new();

    protected override async Task OnInitializedAsync()
    {
        admins = await _UserService.GetAdmins();

        foreach (var admin in admins)
        {
            adminsHasCreatedAuction.Add(admin.InternalID, await _AuctionService.HasAdminCreatedAnyAuction(admin.InternalID));
        }
    }

    private ModalDialog? newAdminModalDialog;

    private class NewAdminModel
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private EditContext? _newAdminFormContext { get; set; }
    private ValidationMessageStore? _newAdminValidationMessageStore { get; set; }

    private NewAdminModel _newAdminModel = new();
    private async Task CreateAdminCallback()
    {
        string passwordHash = BCrypt.HashPassword(_newAdminModel.Password);

        var admin = await _UserService.CreateAdmin(_newAdminModel.Name, _newAdminModel.Email, passwordHash);

        admins.Add(admin);
        adminsHasCreatedAuction.Add(admin.InternalID, false);
    }

    private bool showPasswordNew = false;
    private string inputTypeNew => showPasswordNew ? "text" : "password";
    private void TogglePasswordVisibilityNew() => showPasswordNew = !showPasswordNew;

    private class EditAdminModel
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private int _adminIdToEdit;
    private ModalDialog? _editAdminModalDialog;
    private EditContext? _editAdminFormContext { get; set; }
    private ValidationMessageStore? _editAdminValidationMessageStore { get; set; }
    private EditAdminModel _editAdminModel = new EditAdminModel();

    private void OpenEditModal(AdminModel admin)
    {
        _adminIdToEdit = admin.ID;
        _editAdminModel.Name = admin.Name;
        _editAdminModel.Email = admin.Email;

        _editAdminModalDialog!.Open();
    }

    private async void EditAdminCallback()
    {
        var admin = admins.Find(admin => admin.ID == _adminIdToEdit);

        if (_editAdminModel.Password.Length > 0)
        {
            string passwordHash = BCrypt.HashPassword(_editAdminModel.Password);

            await _UserService.UpdateAdmin(_adminIdToEdit, _editAdminModel.Name, _editAdminModel.Email, passwordHash);
            admin.PasswordHash = passwordHash;
        }
        else
        {
            await _UserService.UpdateAdmin(_adminIdToEdit, _editAdminModel.Name, _editAdminModel.Email);
        }

        admin.Name = _editAdminModel.Name;
        admin.Email = _editAdminModel.Email;

        StateHasChanged();
    }

    private bool showPasswordEdit = false;
    private string inputTypeEdit => showPasswordEdit ? "text" : "password";
    private void TogglePasswordVisibilityEdit() => showPasswordEdit = !showPasswordEdit;

    private ModalDialog? removeAdminModalDialog;

    protected override void OnInitialized()
    {
        _newAdminFormContext = new EditContext(_newAdminModel);
        _newAdminValidationMessageStore = new ValidationMessageStore(_newAdminFormContext);

        _editAdminFormContext = new EditContext(_editAdminModel);
        _editAdminValidationMessageStore = new ValidationMessageStore(_editAdminFormContext);
    }

    private AdminModel adminToRemove;
    private async void RemoveAdminCallback()
    {
        await _UserService.DeleteAdmin(adminToRemove);

        admins.RemoveAll(admin => admin.InternalID == adminToRemove.InternalID);

        StateHasChanged();
    }
}
