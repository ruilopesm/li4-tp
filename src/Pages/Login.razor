@page "/login"

@inject IJSRuntime js
@inject NavigationManager navManager

@inject IUserService _db
@inject AuthenticationStateProvider authStateProvider

<PageTitle>Login</PageTitle>

@* FIXME: Should follow the design *@
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.Email" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        UserModel? user = await _db.GetUser(model.Email);
        // TODO: Check for equality of hashes (we could probably use bcrypt algorithm)
        if (user == null) {
            await js.InvokeVoidAsync("alert", "Invalid credentials");
            return;    
        }

        var convertedStateProvider = (AuthProvider) authStateProvider;
        await convertedStateProvider.UpdateAuthenticationState(new UserSession
            {
                Email = user.Email,
                Role = user.GetRole()
            }
        );

        navManager.NavigateTo("/");
    }
}
