@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager

@inject IUserService _db

<div class="mx-auto flex max-w-7xl items-center">
  <div class="flex flex-1">
    <a href="/" class="flex items-center">
      <img class="h-20 w-auto" src="assets/logo.png" alt="Maçã">
      <p class="text-4xl">Maçã</p>
    </a>
  </div>
  <div class="flex gap-x-28">
    @if (IsAuthenticated)
    {
      <NavLink href="/" ActiveClass="active-link" Match="NavLinkMatch.All" class="hover:underline">Leilões</NavLink>
      <NavLink href="/auctions" ActiveClass="active-link" Match="NavLinkMatch.All" class="hover:underline">Minhas licitações</NavLink>
      <NavLink href="/won" ActiveClass="active-link" Match="NavLinkMatch.All" class="hover:underline">Leilões ganhos</NavLink>
    }
    else
    {
      <NavLink href="/" ActiveClass="active-link" Match="NavLinkMatch.All" class="hover:underline">Leilões</NavLink>
    }
  </div>
  <div class="flex flex-1 space-x-8 items-center justify-end">
    @if (IsAuthenticated && bidder != null)
    {
      <div class="flex flex-col items-center">
        <p class="text-pcs-green underline">@Math.Round(bidder.Balance, 2)€</p>
        <p class="text-xs text-gray-400">@Math.Round(bidder.PendingBalance, 2)€ pendentes</p>
      </div>
      <div class="space-x-2">
        <NavLink href="/profile" ActiveClass="active-link" Match="NavLinkMatch.All" class="hover:underline text-md text-gray-900">Meu Perfil</NavLink>
        <NavLink @onclick="Logout" ActiveClass="active-link" class="cursor-pointer hover:underline text-xs text-gray-600">Sair</NavLink>
      </div>
    }
    else
    {
      <NavLink href="/login" ActiveClass="active-link" class="hover:underline">Entrar</NavLink>
      <NavLink href="/register" ActiveClass="active-link" class="hover:underline">Registar</NavLink>
    }
  </div>
</div>

@code {
  private bool IsAuthenticated;

  private BidderModel? bidder;

  protected override async Task OnInitializedAsync()
  {
    var ourProvider = (AuthProvider)AuthProvider;
    IsAuthenticated = await ourProvider.IsAuthenticated();

    string? email = await ourProvider.GetEmail();
    if (email != null)
    {
      bidder = await _db.GetBidder(email);
    }
  }

  private async Task Logout()
  {
    var ourProvider = (AuthProvider)AuthProvider;
    await ourProvider.Logout();
    NavManager.NavigateTo("/", true);
  }
}
